const apiUrl = 'https://ts.jijathecat.space/logistics/api';  // –ë—ç–∫–µ–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM –∑–∞–≥—Ä—É–∂–µ–Ω!");

    const token = localStorage.getItem('token');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    if (!token) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
        window.location.href = 'login.html'; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    }

    showTab('clients-tab');
    getClients();
    getRoutes();
    getWarehouses();  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
    getOrders();  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    showTab('clients');
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabId) {
    const tabs = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => {
        tab.classList.remove('active');
    });

    const activeTab = document.getElementById(tabId);
    if (activeTab) {
        activeTab.classList.add('active');
    }
}

// ===================== –ö–õ–ò–ï–ù–¢–´ =====================

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
document.getElementById('client-form').addEventListener('submit', async (event) => {
    event.preventDefault();
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...");

    const clientName = document.getElementById('client-name').value;
    const clientEmail = document.getElementById('client-email').value;
    const clientPhone = document.getElementById('client-phone').value;

    const newClient = { name: clientName, email: clientEmail, phone: clientPhone };

    try {
        const response = await fetch(`${apiUrl}/clients/`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newClient)
        });

        if (response.ok) {
            alert('–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!');
            getClients();
            document.getElementById('client-form').reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async function getClients() {
    try {
        const response = await fetch(`${apiUrl}/clients/`);
        const clients = await response.json();
        const clientList = document.getElementById('clients-list');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å id 'clients-list'
        if (!clientList) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç —Å id "clients-list" –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        const clientSelect = document.getElementById('order-client');
        clientList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
//        clientSelect.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

        clients.forEach(client => {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            const li = document.createElement('li');
            li.innerHTML = `–ò–º—è: ${client.name}, Email: ${client.email}, –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}
                <button onclick="editClient(${client.id})">‚úèÔ∏è</button>
                <button onclick="deleteClient(${client.id})">üóëÔ∏è</button>`;
            clientList.appendChild(li);

        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function editClient(clientId) {
    try {
        const response = await fetch(`${apiUrl}/clients/${clientId}`);
        const client = await response.json();

        console.log(`–í—ã–±—Ä–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ ID ${clientId} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

        document.getElementById('client-name').value = client.name;
        document.getElementById('client-email').value = client.email;
        document.getElementById('client-phone').value = client.phone;

        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
        const submitButton = document.querySelector('#client-form button');
        submitButton.textContent = "–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞";
        submitButton.onclick = async (event) => {
            event.preventDefault();
            await updateClient(clientId);
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function updateClient(clientId) {
    const updatedClient = {
        name: document.getElementById('client-name').value,
        email: document.getElementById('client-email').value,
        phone: document.getElementById('client-phone').value
    };

    try {
        const response = await fetch(`${apiUrl}/clients/${clientId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updatedClient)
        });

        if (response.ok) {
            alert('–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!');
            getClients();
            document.getElementById('client-form').reset();
            document.querySelector('#client-form button').textContent = "–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞";
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function deleteClient(clientId) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞?")) return;

    try {
        const response = await fetch(`${apiUrl}/clients/${clientId}`, { method: 'DELETE' });

        if (response.ok) {
            alert('–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω!');
            getClients();
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// ===================== –ú–ê–†–®–†–£–¢–´ =====================

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
document.getElementById('route-form').addEventListener('submit', async (event) => {
    event.preventDefault();
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –º–∞—Ä—à—Ä—É—Ç–∞...");

    const routeOrigin = document.getElementById('route-origin').value;
    const routeDestination = document.getElementById('route-destination').value;
    const routeDistance = document.getElementById('route-distance').value;

    const newRoute = { origin: routeOrigin, destination: routeDestination, distance: routeDistance, };

    try {
        const response = await fetch(`${apiUrl}/routes/`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newRoute)
        });

        if (response.ok) {
            alert('–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω!');
            getRoutes();
            document.getElementById('route-form').reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
async function getRoutes() {
    try {
        const response = await fetch(`${apiUrl}/routes/`);
        const routes = await response.json();
        const routeList = document.getElementById('routes-list');
        const routeSelect = document.getElementById('order-route');
        routeList.innerHTML = '';
        routeSelect.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

        routes.forEach(route => {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
            const li = document.createElement('li');
            li.innerHTML = `–ú–∞—Ä—à—Ä—É—Ç: ${route.id}, –û—Ç–∫—É–¥–∞: ${route.origin}, –ö—É–¥–∞: ${route.destination}, –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${route.distance}
                <button onclick="editRoute(${route.id})">‚úèÔ∏è</button>
                <button onclick="deleteRoute(${route.id})">üóëÔ∏è</button>`;
            routeList.appendChild(li);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
            const option = document.createElement('option');
            option.value = route.id;
            option.textContent = `${route.origin} - ${route.destination}`;
            routeSelect.appendChild(option);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
async function editRoute(routeId) {
    try {
        const response = await fetch(`${apiUrl}/routes/${routeId}`);
        const route = await response.json();

        console.log(`–í—ã–±—Ä–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç ID ${routeId} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

        document.getElementById('route-origin').value = route.origin;
        document.getElementById('route-destination').value = route.destination;
        document.getElementById('route-distance').value = route.distance;

        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
        const submitButton = document.querySelector('#route-form button');
        submitButton.textContent = "–û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç";
        submitButton.onclick = async (event) => {
            event.preventDefault();
            await updateRoute(routeId);
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
async function updateRoute(routeId) {
    const updatedRoute = {
        origin: document.getElementById('route-origin').value,
        destination: document.getElementById('route-destination').value,
        distance: document.getElementById('route-distance').value
    };

    try {
        const response = await fetch(`${apiUrl}/routes/${routeId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updatedRoute)
        });

        if (response.ok) {
            alert('–ú–∞—Ä—à—Ä—É—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!');
            getRoutes();
            document.getElementById('route-form').reset();
            document.querySelector('#route-form button').textContent = "–°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç";
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
async function deleteRoute(routeId) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç?")) return;

    try {
        const response = await fetch(`${apiUrl}/routes/${routeId}`, { method: 'DELETE' });

        if (response.ok) {
            alert('–ú–∞—Ä—à—Ä—É—Ç —É–¥–∞–ª—ë–Ω!');
            getRoutes();
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// ===================== –ó–ê–ö–ê–ó–´ =====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
//async function getOrders() {
//    try {
//        const response = await fetch(`${apiUrl}/orders/`);
//        const orders = await response.json();
//        const orderList = document.getElementById('orders-list');
//        orderList.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//
//        for (let order of orders) {
//            const li = document.createElement('li');
//            li.innerHTML = `–ó–∞–∫–∞–∑: ${order.order_id}, –ö–ª–∏–µ–Ω—Ç: ${order.client_name}, –ú–∞—Ä—à—Ä—É—Ç: ${order.origin} - ${order.destination}, –°–∫–ª–∞–¥: ${order.warehouse_name}, –°—Ç–∞—Ç—É—Å: ${order.order_status}
//                <button onclick="editOrder(${order.order_id})">‚úèÔ∏è</button>
//                <button onclick="deleteOrder(${order.order_id})">üóëÔ∏è</button>`;
//            orderList.appendChild(li);
//        }
//    } catch (error) {
//        console.error('–û—à–∏–±–∫–∞:', error);
//    }
//}
//// ===================== –ó–ê–ö–ê–ó–´ =====================
//
//// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
//document.getElementById('order-form').addEventListener('submit', async (event) => {
//    event.preventDefault();
//    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞...");
//
//    const clientName = document.getElementById('order-client-name').value;
//    const clientEmail = document.getElementById('order-client-email').value;
//    const clientPhone = document.getElementById('order-client-phone').value;
//
//    const cargoDescription = document.getElementById('cargo-input').value;
//    const cargoWeight = document.getElementById('cargo-weight').value;
//    const cargoVolume = document.getElementById('cargo-volume').value;
//
//    const routeId = document.getElementById('order-route').value;
//    const warehouseId = document.getElementById('order-warehouse').value;
//
//    const newOrder = {
//    client_name: clientName,
//    client_email: clientEmail,
//    client_phone: clientPhone,
//    cargo_description: cargoDescription,
//    cargo_weight: cargoWeight,
//    cargo_volume: cargoVolume,
//    route_id: routeId,
//    warehouse_id: warehouseId
//    };
//
//    try {
//        const response = await fetch(`${apiUrl}/orders/create-full`, {
//            method: 'POST',
//            headers: { 'Content-Type': 'application/json' },
//            body: JSON.stringify(newOrder)
//        });
//
//        if (response.ok) {
//            alert('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!');
//            getOrders();  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
//            document.getElementById('order-form').reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
//        } else {
//            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
//        }
//    } catch (error) {
//        console.error('–û—à–∏–±–∫–∞:', error);
//    }
//});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function editOrder(orderId) {
    try {
        const response = await fetch(`${apiUrl}/orders/${orderId}`);
        const order = await response.json();

        console.log(`–í—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑ ID ${orderId} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

        document.getElementById('order-client-name').value = order.client_name;
        document.getElementById('order-client-email').value = order.client_email;
        document.getElementById('order-client-phone').value = order.client_phone;
        document.getElementById('cargo-input').value = order.cargo_description;
        document.getElementById('cargo-weight').value = order.cargo_weight;
        document.getElementById('cargo-volume').value = order.cargo_volume;
        document.getElementById('order-route').value = order.route_id;
        document.getElementById('order-warehouse').value = order.warehouse_id;

        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
        const submitButton = document.querySelector('#order-form button');
        submitButton.textContent = "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑";
        submitButton.onclick = async (event) => {
            event.preventDefault();
            await updateOrder(orderId);
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function updateOrder(orderId) {
    const updatedOrder = {
        client_name: document.getElementById('order-client-name').value,
        client_email: document.getElementById('order-client-email').value,
        client_phone: document.getElementById('order-client-phone').value,
        cargo_description: document.getElementById('cargo-input').value,
        cargo_weight: document.getElementById('cargo-weight').value,
        cargo_volume: document.getElementById('cargo-volume').value,
        route_id: document.getElementById('order-route').value,
        warehouse_id: document.getElementById('order-warehouse').value
    };

    try {
        const response = await fetch(`${apiUrl}/orders/${orderId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updatedOrder)
        });

        if (response.ok) {
            alert('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª—ë–Ω!');
            getOrders(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            document.getElementById('order-form').reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.querySelector('#order-form button').textContent = "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"; // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}


function checkAndAddOption(selectId) {
    const selectElement = document.getElementById(selectId);
    const inputElement = document.getElementById(selectId + '-input');
    const inputValue = inputElement.value.trim();

    if (inputValue && !Array.from(selectElement.options).some(option => option.value === inputValue)) {
        // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
        const newOption = document.createElement('option');
        newOption.value = inputValue;
        newOption.text = inputValue;
        selectElement.appendChild(newOption);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≥—Ä—É–∑–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
function addNewOption(selectId, inputId) {
    const inputValue = document.getElementById(inputId).value.trim();
    const selectElement = document.getElementById(selectId);

    if (inputValue && !Array.from(selectElement.options).some(option => option.value === inputValue)) {
        const newOption = document.createElement('option');
        newOption.value = inputValue;
        newOption.text = inputValue;
        selectElement.appendChild(newOption);
    }
}


// ===================== –°–ö–õ–ê–î–´ =====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
async function getWarehouses() {
    try {
        const response = await fetch(`${apiUrl}/warehouses/`);
        const warehouses = await response.json();
        const warehouseSelect = document.getElementById('order-warehouse');
        warehouseSelect.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

        warehouses.forEach(warehouse => {
            const option = document.createElement('option');
            option.value = warehouse.id;
            option.textContent = warehouse.name;
            warehouseSelect.appendChild(option);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤:', error);
    }
}

async function getOrders() {
    const clientName = document.getElementById('filter-client-name').value.trim();
    const clientEmail = document.getElementById('filter-client-email').value.trim();
    const warehouseName = document.getElementById('filter-warehouse-name').value.trim();
    const warehouseLocation = document.getElementById('filter-warehouse-location').value.trim();

    let filterParams = {};

    if (clientName) filterParams.client_name = clientName;
    if (clientEmail) filterParams.client_email = clientEmail;
    if (warehouseName) filterParams.warehouse_name = warehouseName;
    if (warehouseLocation) filterParams.warehouse_location = warehouseLocation;

    const queryString = new URLSearchParams(filterParams).toString();
    const url = `${apiUrl}/orders/filter/` + (queryString ? '?' + queryString : '');

    try {
        const response = await fetch(url);
        const orders = await response.json();
        const orderList = document.getElementById('orders-list');
        orderList.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        for (let order of orders) {
            const li = document.createElement('li');
            li.innerHTML = `–ó–∞–∫–∞–∑: ${order.order_id}, –ö–ª–∏–µ–Ω—Ç: ${order.client_name}, –ú–∞—Ä—à—Ä—É—Ç: ${order.origin} - ${order.destination}, –°–∫–ª–∞–¥: ${order.warehouse_name}, –°—Ç–∞—Ç—É—Å: ${order.order_status}
                <button onclick="editOrder(${order.order_id})">‚úèÔ∏è</button>
                <button onclick="deleteOrder(${order.order_id})">üóëÔ∏è</button>`;
            orderList.appendChild(li);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
document.getElementById('order-form').addEventListener('submit', async (event) => {
    event.preventDefault();
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞...");

    const clientName = document.getElementById('order-client-name').value;
    const clientEmail = document.getElementById('order-client-email').value;
    const clientPhone = document.getElementById('order-client-phone').value;

    const cargoDescription = document.getElementById('cargo-input').value;
    const cargoWeight = document.getElementById('cargo-weight').value;
    const cargoVolume = document.getElementById('cargo-volume').value;

    const routeId = document.getElementById('order-route').value;
    const warehouseId = document.getElementById('order-warehouse').value;

    const newOrder = {
        client_name: clientName,
        client_email: clientEmail,
        client_phone: clientPhone,
        cargo_description: cargoDescription,
        cargo_weight: cargoWeight,
        cargo_volume: cargoVolume,
        route_id: routeId,
        warehouse_id: warehouseId
    };

    try {
        const response = await fetch(`${apiUrl}/orders/create-full`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newOrder)
        });

        if (response.ok) {
            alert('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!');
            getOrders();  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            document.getElementById('order-form').reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
});