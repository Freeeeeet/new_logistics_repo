const apiUrl = 'https://ts.jijathecat.space/logistics/api';

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabId) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.style.display = 'none';
    });
    document.getElementById(tabId).style.display = 'block';
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
document.getElementById('client-form').addEventListener('submit', async (event) => {
    event.preventDefault();

    const clientId = document.getElementById('client-id').value.trim(); // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
    const clientName = document.getElementById('client-name').value.trim();
    const clientEmail = document.getElementById('client-email').value.trim();
    const clientPhone = document.getElementById('client-phone').value.trim();

    if (!clientName || !clientEmail || !clientPhone) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    const clientData = { name: clientName, email: clientEmail, phone: clientPhone };

    try {
        let response;
        if (clientId) {
            console.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ ID ${clientId}`, clientData);
            response = await fetch(`${apiUrl}/clients/${clientId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(clientData)
            });
        } else {
            console.log('–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', clientData);
            response = await fetch(`${apiUrl}/clients/`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(clientData)
            });
        }

        if (response.ok) {
            alert(clientId ? '–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!' : '–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!');
            document.getElementById('client-form').reset();
            document.getElementById('client-id').value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            getClients();
        } else {
            const errorMessage = await response.text();
            alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async function getClients() {
    try {
        const response = await fetch(`${apiUrl}/clients/`);
        const clients = await response.json();
        const clientList = document.getElementById('clients-list');
        clientList.innerHTML = '';

        clients.forEach(client => {
            const li = document.createElement('li');
            li.innerHTML = `
                <span>–ò–º—è: ${client.name}, Email: ${client.email}, –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}</span>
                <button onclick="editClient(${client.id}, '${client.name}', '${client.email}', '${client.phone}')">‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="deleteClient(${client.id})">üóë –£–¥–∞–ª–∏—Ç—å</button>
            `;
            clientList.appendChild(li);
        });

        console.log('–ö–ª–∏–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', clients);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    }
}

// –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function editClient(id, name, email, phone) {
    console.log(`–í—ã–±—Ä–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ ID ${id} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    document.getElementById('client-id').value = id;
    document.getElementById('client-name').value = name;
    document.getElementById('client-email').value = email;
    document.getElementById('client-phone').value = phone;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function deleteClient(clientId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞?')) return;

    try {
        const response = await fetch(`${apiUrl}/clients/${clientId}`, { method: 'DELETE' });

        if (response.ok) {
            alert('–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω');
            getClients();
        } else {
            const errorMessage = await response.text();
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${errorMessage}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
getClients();
showTab('clients');